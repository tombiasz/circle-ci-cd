version: 2.1

orbs:
  node: circleci/node@2.1.1
  aws-ecr: circleci/aws-ecr@6.7.0

executors:
  node-lts:
    docker:
      - image: cimg/node:lts

commands:
  cache-repo:
    steps:
      - save_cache:
          key: repo-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - ~/project

  restore-repo:
    steps:
      - restore_cache:
          keys:
            - repo-{{ .Environment.CIRCLE_SHA1 }}

  dump-versions:
    steps:
      - run:
          name: Dump versions
          command: |
            node --version
            npm --version

  build-and-push-to-ecr:
    description: "Build docker image and push to ECR"
    parameters:
      repo-name:
        type: string
        default: "circle-ci-cd-staging"
      image-tag:
        type: string
        default: "$CIRCLE_SHA1"
    steps:
      - aws-ecr/build-and-push-image:
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          create-repo: true
          dockerfile: Dockerfile
          path: .
          region: AWS_REGION
          repo: << parameters.repo-name >>
          tag: << parameters.image-tag >>

jobs:
  build:
    executor: node-lts
    steps:
      - checkout
      - cache-repo
      - dump-versions
      - node/install-packages

  test-unit:
    executor: node-lts
    steps:
      - restore-repo
      - node/install-packages
      - run: npm run test:unit

  test-integration:
    executor: node-lts
    steps:
      - restore-repo
      - node/install-packages
      - run: npm run test:integration

  deploy:
    executor: node-lts
    steps:
      - run: echo deploying

  deploy-staging:
    executor: node-lts
    steps:
      - build-and-push-ti-ecr:
          repo-name: "circle-ci-cd-staging"
          default: "$CIRCLE_SHA1"

workflows:
  build:
    jobs:
      - build
      - test-unit:
          requires:
            - build
      - test-integration:
          requires:
            - build
      - deploy:
          requires:
            - test-unit
            - test-integration
          filters:
            branches:
              only: master
      - deploy-staging:
          requires:
            - test-unit
            - test-integration
